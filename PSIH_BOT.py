import logging
import sqlite3
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from collections import deque
import markup as nav
from head import TOKEN_CKR
import datetime


def list_X():
    result_list = []
    with open('no_list.txt', 'r', encoding='utf-8') as f:
        list_x = f.readlines()
        for i in range(len(list_x)):
            x = list_x[i].strip().split(' -')
            result_list.append(x[0])
    result_list = set(result_list)
    return result_list


def sql_select(teleid):
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î –∏ –≤—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ ruk –∑–∞–ø—Ä–æ—Å–∏–≤—à–µ–≥–æ –æ—Ç—á–µ—Ç.
    –ò—â–µ—Ç –≤ –ë–î ruk –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ —Å—Ç—Ä–æ–∫–∏
    """
    con = sqlite3.connect('ASU.sqlite')
    sql = "SELECT * FROM ASUSKLAD WHERE TeleID = ?"
    data = (teleid,)
    with con:
        result = con.execute(sql, data)
        for result_tuple in result:
            return result_tuple


def sql_select_otchet(name):
    """

    """
    con = sqlite3.connect('ASU.sqlite')
    sql = "SELECT * FROM OTCHET WHERE name = ?"
    data = (name,)
    with con:
        result = con.execute(sql, data)
        for result_tuple in result:
            return result_tuple


def logs(x):
    with open('log.txt', 'a+', encoding='utf-8') as f:
        print(datetime.datetime.now(), '–ó–∞–ø—Ä–æ—Å –æ—Ç—á–µ—Ç–∞ - ', x.text.lower(), '-', x.from_user.first_name, x.from_user.id, x.chat,
              file=f, end='\n')


def select_logs():
    with open('log.txt', 'r', encoding='utf-8') as f:
        result_logs = []
        for row in deque(f, 10):
            result_logs.append(row.strip())
        return result_logs


bot = Bot(token=TOKEN_CKR)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)
list_priv = ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞—Å—Ç–µ', '—Ö–∞–π', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', 'ghbdtn']


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(msg: types.Message):
    if msg.from_user.id == 725455605:
        await bot.send_message(msg.from_user.id, 'üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –û –í–ï–õ–ò–ö–ò–ô –°–û–ó–î–ê–¢–ï–õ–¨!!! –ß—Ç–æ –ø–æ–∂–µ–ª–∞–µ—Ç–µ –º–æ–π –ì–û–°–ü–û–î–ò–ù?',
                               reply_markup=nav.main)
    else:
        await bot.send_message(msg.from_user.id, 'üëã –ü—Ä–∏–≤–µ—Ç {0.first_name}'.format(msg.from_user),
                               reply_markup=nav.main)


@dp.message_handler(content_types=['text'])
async def get_text_messages(msg: types.Message):
    if msg.text.lower() in list_priv:
        if msg.from_user.id == 725455605:
            await bot.send_message(msg.from_user.id, 'üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –û –í–ï–õ–ò–ö–ò–ô –°–û–ó–î–ê–¢–ï–õ–¨!!! –ß—Ç–æ –ø–æ–∂–µ–ª–∞–µ—Ç–µ –º–æ–π –ì–û–°–ü–û–î–ò–ù?',
                                   reply_markup=nav.main_Admin)
        else:
            await bot.send_message(msg.from_user.id, 'üëã –ü—Ä–∏–≤–µ—Ç {0.first_name}'.format(msg.from_user),
                                   reply_markup=nav.main)
    elif msg.text == 'ü§ô –û–¢–ß–ï–¢–´':
        await bot.send_message(msg.from_user.id, '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–∑–¥–µ–ª –û–¢–ß–ï–¢–´', reply_markup=nav.main_report)
    elif msg.text == '‚ÅâÔ∏è –ò–ù–§–û ‚ÅâÔ∏è':
        await msg.reply('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ ‚ÅâÔ∏è–ò–ù–§–û ‚ÅâÔ∏è', reply_markup=nav.infoMenu)
    elif msg.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        if msg.from_user.id == 725455605:
            await msg.answer('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=nav.main_Admin)
        else:
            await msg.answer('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=nav.main)
    elif msg.text == '–ê–î–ú–ò–ù–ö–ê':
        await msg.answer('–°–ª—É—à–∞—é –í–∞—Å –°–û–ó–î–ê–¢–ï–õ–¨!', reply_markup=nav.main_AdminMENU)
    elif msg.text == '–õ–û–ì–ò':
        for i in select_logs():
            await msg.answer(i)
    elif msg.text == '–ê–†–ú –°–ö–õ–ê–î –ê–°–£':
        await bot.send_message(msg.from_user.id, '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–∑–¥–µ–ª –û–¢–ß–ï–¢–´ –ê–°–£ –í–†–ö', reply_markup=nav.main_ASU)
    elif msg.text == '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ê–†–ú –°–∫–ª–∞–¥':
        await msg.answer('–í—ã–±–µ—Ä–∏ –≤–∏–¥ –æ—Ç—á–µ—Ç–∞', reply_markup=nav.sklad)
    elif msg.text == '–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –ê–†–ú –°–∫–ª–∞–¥':
        await msg.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ! –î–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!')
    elif msg.text == '–î–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞':
        asuvrk = AS.ASUVRK(sql_select(msg.from_user.id)[0], sql_select_otchet('–ê–†–ú –°–ö–õ–ê–î –ê–°–£')[1])
        data = msg.text
        asuvrk.ruk_count_neprov(data)
        await msg.answer('–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!')
        logs(msg)
    elif msg.text == '–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':
        asuvrk = AS.ASUVRK(sql_select(msg.from_user.id)[0], sql_select_otchet('–ê–†–ú –°–ö–õ–ê–î –ê–°–£')[1])
        data = msg.text
        for j in asuvrk.ruk_count_neprov(data):
            await msg.answer(j)
        logs(msg)
    elif msg.text == '–ë–∞—Ä—Ç–∫–æ–≤—Å–∫–∞—è':
        if msg.from_user.id == 725455605 or msg.from_user.id == 5339196113:
            await msg.answer(m.mail_bart())
            logs(msg)
            await bot.send_message(msg.from_user.id, 'üëã –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç –ë–∞—Ä—Ç–∫–æ–≤—Å–∫–æ–π')
        else:
            await msg.answer(f'{msg.from_user} –¥–ª—è –í–∞—Å –¥–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
    elif msg.text == '–°—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞':
        await msg.answer(f'{msg.from_user.first_name}, —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!')
    else:
        if msg.text.lower() not in list_X() and msg.from_user.id == 725455605:
            await msg.reply('–£—Å–ª—ã—à—Ç–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è!!! –ò –í—ã –±—É–¥–µ—Ç–µ —É—Å–ª—ã—à–∞–Ω—ã!')
            logs(msg)
        elif msg.text.lower() not in list_X():
            logs(msg)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
